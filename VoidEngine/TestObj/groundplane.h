// File generated by "Obj2Header.exe" [Version 1.6] Author: L.Norri CD CGS Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _groundplane_vertexcount_
const unsigned groundplane_vertexcount = 4;
#define _groundplane_vertexcount_
#endif
#ifndef _groundplane_indexcount_
const unsigned groundplane_indexcount = 6;
#define _groundplane_indexcount_
#endif
#ifndef _groundplane_materialcount_
const unsigned groundplane_materialcount = 1;
#define _groundplane_materialcount_
#endif
#ifndef _groundplane_meshcount_
const unsigned groundplane_meshcount = 1;
#define _groundplane_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	float pos[3]; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	float uvw[3]; // D3D/Vulkan style top left 0,0 coordinate.
	float nrm[3]; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _groundplane_data_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT groundplane_data[4] =
{
	{	{ 2.328780f, 0.000000f, -0.940994f },	{ 1.001010f, -0.000360f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.053780f, 0.000000f, -0.940994f },	{ 0.001013f, -0.000360f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.053780f, 0.000000f, 2.090990f },	{ 0.001013f, 0.999644f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ 2.328780f, 0.000000f, 2.090990f },	{ 1.001010f, 0.999644f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
};
#define _groundplane_data_
#endif
#ifndef _groundplane_indicies_
// Index Data follows: Sequential by mesh, Every Three Indicies == One Triangle.
const unsigned int groundplane_indicies[6] =
{
	 0, 1, 2,
	 3, 0, 2,
};
#define _groundplane_indicies_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	float       Kd[3]; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	float       Ks[3]; // specular reflectivity
	float       Ns; // specular exponent
	float       Ka[3]; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	float       Tf[3]; // transmission filter
	float       Ni; // optical density (index of refraction)
	float       Ke[3]; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _groundplane_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL groundplane_materials[1] =
{
	{
		{{ 0.600000f, 0.600000f, 0.600000f },
		1.000000f,
		{ 0.200000f, 0.200000f, 0.200000f },
		500.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.500000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"default",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _groundplane_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _groundplane_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indicies array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int groundplane_batches[1][2] =
{
	{ 6, 0 },
};
#define _groundplane_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _groundplane_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH groundplane_meshes[1] =
{
	{
		"default",
		6,
		0,
		0,
	},
};
#define _groundplane_meshes_
#endif
